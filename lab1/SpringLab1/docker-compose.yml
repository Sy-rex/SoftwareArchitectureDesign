version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - app_net
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10

  mongo:
    image: mongo:latest
    container_name: mongo
    networks:
      - app_net
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 10

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    networks:
      - app_net
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    environment:
      - NEO4J_AUTH=none
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7474" ]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: elasticsearch:8.12.2
    container_name: elasticsearch
    networks:
      - app_net
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    networks:
      - app_net
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=mydb
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 10

  python-script:
    build: ./python-script
    container_name: python-script
    networks:
      - app_net
    depends_on:
      - redis
      - mongo
      - neo4j
      - elasticsearch
      - postgres
    environment:
      - PYTHONUNBUFFERED=1
    command: sh -c "
      echo 'Проверка готовности баз данных...';
      wait-for-it postgres:5432 --timeout=0 &&
      wait-for-it mongo:27017 --timeout=0 &&
      wait-for-it redis:6379 --timeout=0 &&
      wait-for-it neo4j:7687 --timeout=0 &&
      wait-for-it elasticsearch:9200 --timeout=0 &&
      echo 'Все БД готовы. Запуск скрипта...';
      python ./insert.py"
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_net
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc zookeeper 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app_net
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-verification --bootstrap-server kafka:9092 --version"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-connect:
    image: debezium/connect:1.9
    container_name: kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8085:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: false
      VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_REST_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_ADVERTISED_PORT: 8083
      PLUGIN_PATH: /kafka/connect
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_FLUSH_INTERVAL_MS: 10000
    volumes:
      - ./confluent-connectors:/kafka/connect/confluent-connectors
    networks:
      - app_net
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/" ]
      interval: 10s
      timeout: 5s
      retries: 10
    
  connector-setup:
    image: curlimages/curl:7.87.0
    container_name: connector-setup
    depends_on:
      - kafka-connect
    entrypoint: 
      - sh
      - -c
      - |
        echo 'Waiting for Kafka Connect to start...';
        sleep 60;
        echo "Checking Kafka Connect version...";
        curl -v http://kafka-connect:8083/ | grep version;
        echo "Registering connector...";
        curl -X POST http://kafka-connect:8083/connectors \
          -H 'Content-Type: application/json' \
          --data @/connectors/postgres.json \
          -v;
        echo "Checking connector status...";
        sleep 10;
        curl -v http://kafka-connect:8083/connectors;
    volumes:
      - ./connectors/postgres.json:/connectors/postgres.json:ro
    networks:
      - app_net
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8086:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app_net

  spring-boot-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-boot-app
    depends_on:
      python-script:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - app_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s

  api-gateway:
    build:
      context: ../../gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    networks:
      - app_net
    depends_on:
      python-script:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    command: sh -c "wait-for-it spring-boot-app:8081 --timeout=0 && ./run-api-gateway.sh"

  spring-boot-app-2:
    build:
      context: ../../SpringLab2
      dockerfile: Dockerfile
    container_name: spring-boot-app-2
    depends_on:
      python-script:
        condition: service_completed_successfully
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - app_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s

  spring-boot-app-3:
    build:
      context: ../../SpringLab3
      dockerfile: Dockerfile
    container_name: spring-boot-app-3
    depends_on:
      python-script:
        condition: service_completed_successfully
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - app_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s

volumes:
  redis-data:
  mongo-data:
  neo4j-data:
  neo4j-logs:
  elasticsearch-data:
  postgres-data:

networks:
  app_net:
    name: app_net
    driver: bridge